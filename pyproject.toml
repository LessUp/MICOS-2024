[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "micos-2024"
description = "MICOS-2024: Metagenomic Intelligence and Comprehensive Omics Suite"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MICOS-2024 Team", email = "micos2024@example.com"}
]
keywords = ["metagenomics", "bioinformatics", "microbiome", "genomics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scipy>=1.7.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "biopython>=1.79",
    "scikit-learn>=1.0.0",
    "networkx>=2.6.0",
    "pyyaml>=5.4.0",
    "click>=8.0.0",
    "tqdm>=4.62.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-cov>=3.0.0",
    "black>=21.0.0",
    "flake8>=4.0.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
    "isort>=5.9.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.17.0",
]
viz = [
    "dash>=2.0.0",
    "streamlit>=1.0.0",
    "bokeh>=2.4.0",
    "altair>=4.2.0",
]

[project.urls]
Homepage = "https://github.com/BGI-MICOS/MICOS-2024"
Repository = "https://github.com/BGI-MICOS/MICOS-2024"
Documentation = "https://github.com/BGI-MICOS/MICOS-2024/docs"
"Bug Tracker" = "https://github.com/BGI-MICOS/MICOS-2024/issues"

[project.scripts]
micos = "micos.cli:main"

[tool.setuptools_scm]
write_to = "micos/_version.py"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | legacy
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["legacy/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
    "legacy",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "legacy/",
    "build/",
    "dist/",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["micos"]
omit = [
    "*/tests/*",
    "*/legacy/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105", "D107"]
match-dir = "(?!legacy).*"
